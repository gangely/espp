= Publish DHT
gangely
:TOC:

== info

* this set of scripts will publish DHT22 temperature and humidity measurements to subscribed MQTT clients, as long as battery or 5VDC measurement, and status messages
* the measurements can be printed on the screen of any client workstation and logged to files
* after each set of measurements, the ESP32 will enter deepsleep; the sleep time is set in minutes
* the MQTT topics are: `esp32/battery`, `esp32/dht`, `esp32/status`
* the installation is described in two parts, followed by a short HOW-TO run the scripts:

 a. the installation common to the other subprojects
 a. the installation of the `dht-pub` scripts
 a. `dht-pub` scripts usage

== common installation

* hardware: link:https://github.com/gangely/espp/wiki/Hardware-Setup[Hardware Setup for the DHT22 and the ADC input]
* software: link:https://github.com/gangely/espp/wiki/MQTT-common-installation[MQTT common installation]

== installation of the `dht-pub` scripts 

=== on the ESP32

==== uPython scripts 
copy the files:

* `../boot/boot.py`
* `../boot/mycredentials.py`
* `../common/setrtc.py`
* `main.py`
* `dht_pub.py`

==== parameters to edit

* `boot.py`: `STAADDR` `STAMASK` `STAGW` `STADNS`
* `mycredentials.py`: `MYAPSSID` `MYAPPASS`
* `dht_pub.py`: `BROKER`

=== on workstation and/or server

==== Python scripts
copy the files:

* `bat_print.py`  `dht_print.py`  `sta_print.py`
* `bat_log.py`  `dht_log.py`  `sta_log.py`
* `topic_print.py`

==== parameter to edit
* in `topic_print.py`, edit `BROKER`; address format can be `<hostname>` or `<111.222.333.444>`

== `dht-pub` scripts usage

=== on the ESP32

* in REPL: `import dht_pub`
* to change the deepsleep length, adjust `SLEEPTIME`; the value is in _minutes_
* to monitor: the `esperr-YYYYMMDD.log` files

=== on client workstation

==== printing on terminals
* open up to 3 terminals, one for each topic, and launch the requested MQTT client: +
----
python

>>> import dht_print # or bat_print or sta_print
----
* example with `tmux`: ESP32 REPL in upper half; 3 MQTT clients in lower half +
image:Screenshot_20180320_201506.png[]

=== on a server or a 24/7 machine

==== logging to files
* use the `bat/dht/sta_log.py` to print in terminal _and_ log the messages to daily log files `espbat-YYYYMMDD.log`, `espdht-YYYYMMDD.log` and `espsta-YYYYMMDD.log`
* the logging scripts should be run on a 24/7 machine, a.e. a server (the broker will be fine); if the machine is headless, start the script in ssh
* tip: a multi terminal tool such as `tmux` will use a single ssh link to operate, and will allow to easily detach/reattach all the terminals at once
* MQTT by itself, and these scripts are very resilient:
 . they can be left running in background, even if the ESP32 is disconnected
 . logging to the files will be resumed when the ESP32 is reconnected; new files will be started if the date has changed



